@software{arielTypeLevelArithmetic2023,
  title = {Type {{Level Arithmetic}}},
  author = {Ariel},
  date = {2023-01-11T21:54:52Z},
  origdate = {2022-09-04T10:54:16Z},
  url = {https://github.com/arielhs/ts-arithmetic},
  urldate = {2023-01-15},
  abstract = {Perform Type Level arithmetic in TypeScript}
}

@inproceedings{bognerTypeNotType2022,
  title = {To Type or Not to Type? A Systematic Comparison of the Software Quality of {{JavaScript}} and Typescript Applications on {{GitHub}}},
  shorttitle = {To Type or Not to Type?},
  booktitle = {Proceedings of the 19th {{International Conference}} on {{Mining Software Repositories}}},
  author = {Bogner, Justus and Merkel, Manuel},
  date = {2022-10-17},
  series = {{{MSR}} '22},
  pages = {658--669},
  publisher = {{Association for Computing Machinery}},
  location = {{New York, NY, USA}},
  doi = {10.1145/3524842.3528454},
  url = {https://doi.org/10.1145/3524842.3528454},
  urldate = {2023-01-29},
  abstract = {JavaScript (JS) is one of the most popular programming languages, and widely used for web apps, mobile apps, desktop clients, and even backend development. Due to its dynamic and flexible nature, however, JS applications often have a reputation for poor software quality. While the type-safe superset TypeScript (TS) offers features to address these prejudices, there is currently insufficient empirical evidence to broadly support the claim that TS applications exhibit better software quality than JS applications. We therefore conducted a repository mining study based on 604 GitHub projects (299 for JS, 305 for TS) with over 16M LoC. Using SonarQube and the GitHub API, we collected and analyzed four facets of software quality: a) code quality (\# of code smells per LoC), b) code understandability (cognitive complexity per LoC), c) bug proneness (bug fix commit ratio), and d) bug resolution time (mean time a bug issue is open). For TS, we also collected how frequently the type-safety ignoring any type was used per project via ESLint. The analysis indicates that TS applications exhibit significantly better code quality and understandability than JS applications. Contrary to expectations, however, bug proneness and bug resolution time of our TS sample were not significantly lower than for JS: the mean bug fix commit ratio of TS projects was more than 60\% larger (0.126 vs. 0.206), and TS projects needed on average more than an additional day to fix bugs (31.86 vs. 33.04 days). Furthermore, reducing the usage of the any type in TS apps appears to be beneficial: its frequency was significantly correlated with all metrics except bug proneness, even though the correlations were of small strengths (Spearman's rho between 0.17 and 0.26). Our results indicate that the perceived positive influence of TypeScript for avoiding bugs in comparison to JavaScript may be more complicated than assumed. While using TS seems to have benefits, it does not automatically lead to less and easier to fix bugs. However, more research is needed in this area, especially concerning the potential influence of project complexity and developer experience.},
  isbn = {978-1-4503-9303-4},
  keywords = {GitHub,JavaScript,repository mining,software quality,TypeScript},
  file = {/Users/duongtat/Zotero/storage/WX93AJVA/Bogner and Merkel - 2022 - To type or not to type a systematic comparison of.pdf}
}

@online{BuckleScriptReasonRebranding,
  title = {{{BuckleScript}} \& {{Reason Rebranding}}},
  url = {https://rescript-lang.org/blog/bucklescript-is-rebranding},
  urldate = {2023-01-29},
  abstract = {A new unified experience for the platform},
  organization = {{ReScript Blog}},
  file = {/Users/duongtat/Zotero/storage/3UY47J3V/bucklescript-is-rebranding.html}
}

@online{dablerImplementingArithmeticTypeScript2021,
  title = {Implementing {{Arithmetic Within TypeScript}}’s {{Type System}}},
  author = {Dabler, Ryan},
  date = {2021-11-10T21:11:43},
  url = {https://itnext.io/implementing-arithmetic-within-typescripts-type-system-a1ef140a6f6f},
  urldate = {2023-01-15},
  abstract = {Use TypeScript’s 4.x releases to implement natural numbers and basic mathematical operators.},
  langid = {english},
  organization = {{Medium}},
  file = {/Users/duongtat/Zotero/storage/KFRHPAXP/implementing-arithmetic-within-typescripts-type-system-a1ef140a6f6f.html}
}

@online{DocumentationTypeScriptJavaScript,
  title = {Documentation - {{TypeScript}} for {{JavaScript Programmers}}},
  url = {https://www.typescriptlang.org/docs/handbook/typescript-in-5-minutes.html},
  urldate = {2023-01-14},
  abstract = {Learn how TypeScript extends JavaScript},
  langid = {english},
  file = {/Users/duongtat/Zotero/storage/CRHXCVYD/typescript-in-5-minutes.html}
}

@software{ECMAScriptProposalType2023,
  title = {{{ECMAScript}} Proposal: {{Type Annotations}}},
  shorttitle = {{{ECMAScript}} Proposal},
  date = {2023-01-29T09:57:00Z},
  origdate = {2020-12-18T13:49:01Z},
  url = {https://github.com/tc39/proposal-type-annotations},
  urldate = {2023-01-29},
  abstract = {ECMAScript proposal for type syntax that is erased - Stage 1},
  organization = {{Ecma TC39}}
}

@inproceedings{fardJSNOSEDetectingJavaScript2013a,
  title = {{{JSNOSE}}: {{Detecting JavaScript Code Smells}}},
  shorttitle = {{{JSNOSE}}},
  booktitle = {2013 {{IEEE}} 13th {{International Working Conference}} on {{Source Code Analysis}} and {{Manipulation}} ({{SCAM}})},
  author = {Fard, Amin Milani and Mesbah, Ali},
  date = {2013-09},
  pages = {116--125},
  doi = {10.1109/SCAM.2013.6648192},
  abstract = {JavaScript is a powerful and flexible prototype-based scripting language that is increasingly used by developers to create interactive web applications. The language is interpreted, dynamic, weakly-typed, and has first-class functions. In addition, it interacts with other web languages such as CSS and HTML at runtime. All these characteristics make JavaScript code particularly error-prone and challenging to write and maintain. Code smells are patterns in the source code that can adversely influence program comprehension and maintainability of the program in the long term. We propose a set of 13 JavaScript code smells, collected from various developer resources. We present a JavaScript code smell detection technique called JSNOSE. Our metric-based approach combines static and dynamic analysis to detect smells in client-side code. This automated technique can help developers to spot code that could benefit from refactoring. We evaluate the smell finding capabilities of our technique through an empirical study. By analyzing 11 web applications, we investigate which smells detected by JSNOSE are more prevalent.},
  eventtitle = {2013 {{IEEE}} 13th {{International Working Conference}} on {{Source Code Analysis}} and {{Manipulation}} ({{SCAM}})},
  keywords = {Cascading style sheets,code smell,Conferences,HTML,JavaScript,Measurement,Prototypes,Reactive power,Runtime,smell detection,web applications},
  file = {/Users/duongtat/Zotero/storage/PY2MSYU3/Fard and Mesbah - 2013 - JSNOSE Detecting JavaScript Code Smells.pdf;/Users/duongtat/Zotero/storage/NACK3BUK/6648192.html}
}

@software{Flow2023,
  title = {Flow},
  date = {2023-01-29T12:33:40Z},
  origdate = {2014-10-28T17:17:45Z},
  url = {https://github.com/facebook/flow},
  urldate = {2023-01-29},
  abstract = {Adds static typing to JavaScript to improve developer productivity and code quality.},
  organization = {{Meta}}
}

@online{hexoEffectiveTypeScriptSeven2021,
  title = {Effective {{TypeScript}} › {{The Seven Sources}} of {{Unsoundness}} in {{TypeScript}}},
  author = {{Hexo}},
  date = {2021-05-07},
  url = {https://effectivetypescript.com/},
  urldate = {2023-01-29},
  abstract = {Hang out on the internet much and you\&\#39;ll hear gripes about how TypeScript isn\&\#39;t \&quot;sound,\&quot; and that this makes it a poor choice of language. In this post, I\&\#39;ll explain what this means and walk through the sources of unsoundness in TypeScript. Rest assured, TypeScript is a great language and it\&\#39;s never a good idea to listen to people on the internet!},
  file = {/Users/duongtat/Zotero/storage/FCQAU4A6/unsoundness.html}
}

@software{kawayilinlinKawayiLinLinTypescriptlodash2023,
  title = {{{kawayiLinLin}}/Typescript-Lodash},
  author = {{kawayiLinLin}},
  date = {2023-01-09T06:26:22Z},
  origdate = {2022-01-30T06:58:40Z},
  url = {https://github.com/kawayiLinLin/typescript-lodash},
  urldate = {2023-01-15},
  abstract = {A typescript tools lib},
  keywords = {js,jslibrary,lodash,ts,tslib,types,typescript,utils}
}

@online{klepovMakingSenseTypeScript2023,
  title = {Making Sense of {{TypeScript}} Using Set Theory},
  author = {Klepov, Vladimir},
  date = {2023-01-23T00:00:00},
  url = {https://blog.thoughtspile.tech/2023/01/23/typescript-sets/},
  urldate = {2023-01-24},
  langid = {english},
  organization = {{Vladimir Klepov as a Coder}},
  file = {/Users/duongtat/Zotero/storage/EZE3EN2N/typescript-sets.html}
}

@online{MistlogTypetypeProgramming,
  title = {Mistlog/Typetype: {{A}} Programming Language Designed for Typescript Type Generation},
  url = {https://github.com/mistlog/typetype},
  urldate = {2023-01-25},
  file = {/Users/duongtat/Zotero/storage/XAC77PJQ/typetype.html}
}

@online{Octoverse2022State,
  title = {Octoverse 2022: {{The}} State of Open Source},
  shorttitle = {Octoverse 2022},
  url = {https://octoverse.github.com/},
  urldate = {2023-01-29},
  abstract = {How open source is changing software development including at companies.},
  langid = {british},
  organization = {{The State of the Octoverse}},
  file = {/Users/duongtat/Zotero/storage/LY7VJIUK/octoverse.github.com.html}
}

@online{README,
  title = {{{README}}},
  url = {https://basarat.gitbook.io/typescript/},
  urldate = {2023-01-18},
  langid = {english},
  file = {/Users/duongtat/Zotero/storage/TML57CY6/typescript.html}
}

@online{ReconstructingTypeScriptPart,
  title = {Reconstructing {{TypeScript}}, Part 0: Intro and Background},
  url = {https://jaked.org/blog/2021-09-07-Reconstructing-TypeScript-part-0},
  urldate = {2023-01-24},
  file = {/Users/duongtat/Zotero/storage/6KT5F8D4/2021-09-07-Reconstructing-TypeScript-part-0.html}
}

@online{StackOverflowDeveloper,
  title = {Stack {{Overflow Developer Survey}} 2022},
  url = {https://survey.stackoverflow.co/2022/?utm_source=social-share&utm_medium=social&utm_campaign=dev-survey-2022},
  urldate = {2023-01-29},
  abstract = {In May 2022 over 70,000 developers told us how they learn and level up, which tools they’re using, and what they want.},
  langid = {english},
  organization = {{Stack Overflow}},
  file = {/Users/duongtat/Zotero/storage/NXIJAW6Y/2022.html}
}

@online{TypeScriptCompilerInternals,
  title = {{{TypeScript Compiler Internals}}},
  url = {https://basarat.gitbook.io/typescript/overview},
  urldate = {2023-01-29},
  langid = {english},
  file = {/Users/duongtat/Zotero/storage/ACPRC8UN/overview.html}
}

@online{TypeScriptDesignGoals,
  title = {{{TypeScript Design Goals}}},
  url = {https://github.com/microsoft/TypeScript/wiki/TypeScript-Design-Goals},
  urldate = {2023-01-29},
  abstract = {TypeScript is a superset of JavaScript that compiles to clean JavaScript output. - microsoft/TypeScript},
  langid = {english},
  organization = {{GitHub}},
  file = {/Users/duongtat/Zotero/storage/4FTYCKHX/TypeScript-Design-Goals.html}
}

@book{vanderkamEffectiveTypeScript622019,
  title = {Effective {{TypeScript}}: 62 Specific Ways to Improve Your {{TypeScript}}},
  shorttitle = {Effective {{TypeScript}}},
  author = {Vanderkam, Dan},
  date = {2019},
  edition = {First edition},
  publisher = {{O'Reilly Media}},
  location = {{Beijing [China] ; Sebastopol, CA}},
  isbn = {978-1-4920-5374-3},
  pagetotal = {243},
  keywords = {Application software,Development,TypeScript (Computer program language),Web applications}
}
