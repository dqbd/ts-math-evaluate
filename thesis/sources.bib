@online{AllowClassesBe,
  title = {Allow Classes to Be Parametric in Other Parametric Classes ¬∑ {{Issue}} \#1213 ¬∑ Microsoft/{{TypeScript}}},
  url = {https://github.com/microsoft/TypeScript/issues/1213},
  urldate = {2023-04-25},
  abstract = {This is a proposal for allowing generics as type parameters. It's currently possible to write specific examples of monads, but in order to write the interface that all monads satisfy, I propose wri...},
  langid = {english},
  organization = {{GitHub}},
  file = {/Users/duongtat/Zotero/storage/FVNYWPUF/1213.html}
}

@online{AnnouncingTypeScript4.1,
  title = {Announcing {{TypeScript}} 4.1},
  author = {Rosenwasser, Daniel},
  date = {2020-11-19T22:02:26+00:00},
  url = {https://devblogs.microsoft.com/typescript/announcing-typescript-4-1/},
  urldate = {2023-03-29},
  abstract = {Today we‚Äôre proud to release TypeScript 4.1! If you‚Äôre unfamiliar with TypeScript, it‚Äôs a language that builds on JavaScript by adding syntax for type declarations and annotations. This syntax can be used by the TypeScript compiler to type-check our code, and then output clean readable JavaScript that runs on lots of different runtimes.},
  langid = {american},
  organization = {{TypeScript}},
  file = {/Users/duongtat/Zotero/storage/4SZ69YRT/announcing-typescript-4-1.html}
}

@online{AnnouncingTypeScript4.7,
  title = {Announcing {{TypeScript}} 4.7},
  author = {Rosenwasser, Daniel},
  date = {2022-05-24T19:36:55+00:00},
  url = {https://devblogs.microsoft.com/typescript/announcing-typescript-4-7/},
  urldate = {2023-03-29},
  abstract = {Today we‚Äôre excited to announce the availability of TypeScript 4.7! If you‚Äôre not yet familiar with TypeScript, it‚Äôs a language that builds on JavaScript and adds syntax for types. Types help describe what kinds of values you‚Äôre working with and what kinds of functions you‚Äôre calling.},
  langid = {american},
  organization = {{TypeScript}},
  file = {/Users/duongtat/Zotero/storage/DQFHNMFC/announcing-typescript-4-7.html}
}

@software{arielTypeLevelArithmetic2023,
  title = {Type {{Level Arithmetic}}},
  author = {Ariel},
  date = {2023-01-11T21:54:52Z},
  origdate = {2022-09-04T10:54:16Z},
  url = {https://github.com/arielhs/ts-arithmetic},
  urldate = {2023-01-15},
  abstract = {Perform Type Level arithmetic in TypeScript}
}

@software{arshLilnasySee2023,
  title = {Lilnasy/See},
  author = {Arsh},
  date = {2023-04-29T01:11:14Z},
  origdate = {2023-04-09T06:41:58Z},
  url = {https://github.com/lilnasy/see},
  urldate = {2023-04-29},
  abstract = {A neural network in TypeScript's type system. A vision model that recognizes digits. Based on Dr. Chris Eliasmith's research. Implemented purely in type-level TypeScript.}
}

@online{atlassianContinuousIntegrationVs,
  title = {Continuous Integration vs. Delivery vs. Deployment},
  author = {Atlassian},
  url = {https://www.atlassian.com/continuous-delivery/principles/continuous-integration-vs-delivery-vs-deployment},
  urldate = {2023-04-28},
  abstract = {Learn the difference between continuous integration, continuous delivery, and continuous deployment in modern software development and DevOps.},
  langid = {english},
  organization = {{Atlassian}},
  file = {/Users/duongtat/Zotero/storage/3M4HIIKL/continuous-integration-vs-delivery-vs-deployment.html}
}

@software{BabelBabel2023,
  title = {Babel/Babel},
  date = {2023-01-31T17:06:23Z},
  origdate = {2014-09-28T13:38:23Z},
  url = {https://github.com/babel/babel},
  urldate = {2023-02-01},
  abstract = {üê† Babel is a compiler for writing next generation JavaScript.},
  organization = {{Babel}},
  keywords = {ast,babel,compiler,es2015,es6,flavortown,javascript}
}

@software{balasianoPrettyTypeScriptErrors2023,
  title = {Pretty {{TypeScript Errors}}},
  author = {Balasiano, Yoav},
  date = {2023-04-26T23:56:41Z},
  origdate = {2022-08-30T23:01:50Z},
  url = {https://github.com/yoavbls/pretty-ts-errors},
  urldate = {2023-04-27},
  abstract = {üîµ Make TypeScript errors prettier and human-readable in VSCode üéÄ},
  keywords = {astro,deno,errors,svelte,typescript,vscode,vscode-extension,vue}
}

@inproceedings{biermanUnderstandingTypeScript2014,
  title = {Understanding {{TypeScript}}},
  booktitle = {{{ECOOP}} 2014 ‚Äì {{Object-Oriented Programming}}},
  author = {Bierman, Gavin and Abadi, Mart√≠n and Torgersen, Mads},
  editor = {Jones, Richard},
  date = {2014},
  series = {Lecture {{Notes}} in {{Computer Science}}},
  pages = {257--281},
  publisher = {{Springer}},
  location = {{Berlin, Heidelberg}},
  doi = {10.1007/978-3-662-44202-9_11},
  abstract = {TypeScript is an extension of JavaScript intended to enable easier development of large-scale JavaScript applications. While every JavaScript program is a TypeScript program, TypeScript offers a module system, classes, interfaces, and a rich gradual type system. The intention is that TypeScript provides a smooth transition for JavaScript programmers‚Äîwell-established JavaScript programming idioms are supported without any major rewriting or annotations. One interesting consequence is that the TypeScript type system is not statically sound by design. The goal of this paper is to capture the essence of TypeScript by giving a precise definition of this type system on a core set of constructs of the language. Our main contribution, beyond the familiar advantages of a robust, mathematical formalization, is a refactoring into a safe inner fragment and an additional layer of unsafe rules.},
  isbn = {978-3-662-44202-9},
  langid = {english},
  keywords = {Call Signature,Object Type,Operational Semantic,Return Type,Type System},
  file = {/Users/duongtat/Zotero/storage/N43TJCLE/Bierman et al. - 2014 - Understanding TypeScript.pdf}
}

@inproceedings{bognerTypeNotType2022,
  title = {To Type or Not to Type? A Systematic Comparison of the Software Quality of {{JavaScript}} and Typescript Applications on {{GitHub}}},
  shorttitle = {To Type or Not to Type?},
  booktitle = {Proceedings of the 19th {{International Conference}} on {{Mining Software Repositories}}},
  author = {Bogner, Justus and Merkel, Manuel},
  date = {2022-10-17},
  series = {{{MSR}} '22},
  pages = {658--669},
  publisher = {{Association for Computing Machinery}},
  location = {{New York, NY, USA}},
  doi = {10.1145/3524842.3528454},
  url = {https://doi.org/10.1145/3524842.3528454},
  urldate = {2023-01-29},
  abstract = {JavaScript (JS) is one of the most popular programming languages, and widely used for web apps, mobile apps, desktop clients, and even backend development. Due to its dynamic and flexible nature, however, JS applications often have a reputation for poor software quality. While the type-safe superset TypeScript (TS) offers features to address these prejudices, there is currently insufficient empirical evidence to broadly support the claim that TS applications exhibit better software quality than JS applications. We therefore conducted a repository mining study based on 604 GitHub projects (299 for JS, 305 for TS) with over 16M LoC. Using SonarQube and the GitHub API, we collected and analyzed four facets of software quality: a) code quality (\# of code smells per LoC), b) code understandability (cognitive complexity per LoC), c) bug proneness (bug fix commit ratio), and d) bug resolution time (mean time a bug issue is open). For TS, we also collected how frequently the type-safety ignoring any type was used per project via ESLint. The analysis indicates that TS applications exhibit significantly better code quality and understandability than JS applications. Contrary to expectations, however, bug proneness and bug resolution time of our TS sample were not significantly lower than for JS: the mean bug fix commit ratio of TS projects was more than 60\% larger (0.126 vs. 0.206), and TS projects needed on average more than an additional day to fix bugs (31.86 vs. 33.04 days). Furthermore, reducing the usage of the any type in TS apps appears to be beneficial: its frequency was significantly correlated with all metrics except bug proneness, even though the correlations were of small strengths (Spearman's rho between 0.17 and 0.26). Our results indicate that the perceived positive influence of TypeScript for avoiding bugs in comparison to JavaScript may be more complicated than assumed. While using TS seems to have benefits, it does not automatically lead to less and easier to fix bugs. However, more research is needed in this area, especially concerning the potential influence of project complexity and developer experience.},
  isbn = {978-1-4503-9303-4},
  keywords = {GitHub,JavaScript,repository mining,software quality,TypeScript},
  file = {/Users/duongtat/Zotero/storage/WX93AJVA/Bogner and Merkel - 2022 - To type or not to type a systematic comparison of.pdf}
}

@online{BuckleScriptReasonRebranding,
  title = {{{BuckleScript}} \& {{Reason Rebranding}}},
  url = {https://rescript-lang.org/blog/bucklescript-is-rebranding},
  urldate = {2023-01-29},
  abstract = {A new unified experience for the platform},
  organization = {{ReScript Blog}},
  file = {/Users/duongtat/Zotero/storage/3UY47J3V/bucklescript-is-rebranding.html}
}

@software{ChangesetsChangesets2023,
  title = {Changesets/Changesets},
  date = {2023-04-26T21:55:36Z},
  origdate = {2019-03-21T22:33:37Z},
  url = {https://github.com/changesets/changesets},
  urldate = {2023-04-26},
  abstract = {A way to manage your versioning and changelogs with a focus on monorepos},
  organization = {{changesets}}
}

@article{chaudhuriFastPreciseType2017,
  title = {Fast and Precise Type Checking for {{JavaScript}}},
  author = {Chaudhuri, Avik and Vekris, Panagiotis and Goldman, Sam and Roch, Marshall and Levi, Gabriel},
  date = {2017-10-12},
  journaltitle = {Proceedings of the ACM on Programming Languages},
  shortjournal = {Proc. ACM Program. Lang.},
  volume = {1},
  pages = {48:1--48:30},
  doi = {10.1145/3133872},
  url = {https://doi.org/10.1145/3133872},
  urldate = {2023-01-29},
  abstract = {In this paper we present the design and implementation of Flow, a fast and precise type checker for JavaScript that is used by thousands of developers on millions of lines of code at Facebook every day. Flow uses sophisticated type inference to understand common JavaScript idioms precisely. This helps it find non-trivial bugs in code and provide code intelligence to editors without requiring significant rewriting or annotations from the developer. We formalize an important fragment of Flow's analysis and prove its soundness. Furthermore, Flow uses aggressive parallelization and incrementalization to deliver near-instantaneous response times. This helps it avoid introducing any latency in the usual edit-refresh cycle of rapid JavaScript development. We describe the algorithms and systems infrastructure that we built to scale Flow's analysis.},
  issue = {OOPSLA},
  keywords = {JavaScript,Type Inference,Type Systems},
  file = {/Users/duongtat/Zotero/storage/SLCVD9LA/Chaudhuri et al. - 2017 - Fast and precise type checking for JavaScript.pdf}
}

@online{ContextuallyInferParameters,
  title = {Contextually Infer Parameters for Type Aliases/Interfaces ¬∑ {{Issue}} \#32794 ¬∑ Microsoft/{{TypeScript}}},
  url = {https://github.com/microsoft/TypeScript/issues/32794},
  urldate = {2023-03-25},
  abstract = {Search Terms type alias parameter inference contextual Suggestion The type parameters of a type alias (or interface) should be able to be inferred when a value is being assigned/cast to that type/i...},
  langid = {english},
  organization = {{GitHub}},
  file = {/Users/duongtat/Zotero/storage/84EEJUD5/32794.html}
}

@online{dablerImplementingArithmeticTypeScript2021,
  title = {Implementing {{Arithmetic Within TypeScript}}‚Äôs {{Type System}}},
  author = {Dabler, Ryan},
  date = {2021-11-10T21:11:43},
  url = {https://itnext.io/implementing-arithmetic-within-typescripts-type-system-a1ef140a6f6f},
  urldate = {2023-01-15},
  abstract = {Use TypeScript‚Äôs 4.x releases to implement natural numbers and basic mathematical operators.},
  langid = {english},
  organization = {{Medium}},
  file = {/Users/duongtat/Zotero/storage/KFRHPAXP/implementing-arithmetic-within-typescripts-type-system-a1ef140a6f6f.html}
}

@online{DansoUnderstandingHigherkinded,
  title = {Danso - Understanding Higher-Kinded Types},
  url = {https://danso.ca/blog/higher-kinded-types/},
  urldate = {2023-04-25},
  file = {/Users/duongtat/Zotero/storage/RFVV28S2/higher-kinded-types.html}
}

@article{dijkstraMakingTranslatorAlgol1963,
  title = {Making a Translator for {{Algol}} 60},
  author = {Dijkstra, E.W.},
  date = {1963},
  journaltitle = {Annual Review in Automatic Programming},
  volume = {3},
  pages = {347--356},
  issn = {0066-4138},
  doi = {10.1016/S0066-4138(63)80016-6},
  abstract = {No abstract.},
  file = {/Users/duongtat/Zotero/storage/JHVDDLPV/MR35.pdf}
}

@online{DocumentationDeclarationMerging,
  title = {Documentation - {{Declaration Merging}}},
  url = {https://www.typescriptlang.org/docs/handbook/declaration-merging.html#module-augmentation},
  urldate = {2023-04-10},
  abstract = {How merging namespaces and interfaces works},
  langid = {english},
  file = {/Users/duongtat/Zotero/storage/582K8CFG/declaration-merging.html}
}

@online{DocumentationEverydayTypes,
  title = {Documentation - {{Everyday Types}}},
  url = {https://www.typescriptlang.org/docs/handbook/2/everyday-types.html},
  urldate = {2023-03-27},
  abstract = {The language primitives.},
  langid = {english},
  file = {/Users/duongtat/Zotero/storage/WI2LU26S/everyday-types.html}
}

@online{DocumentationTemplateLiteral,
  title = {Documentation - {{Template Literal Types}}},
  url = {https://www.typescriptlang.org/docs/handbook/2/template-literal-types.html},
  urldate = {2023-04-02},
  abstract = {Generating mapping types which change properties via template literal strings.},
  langid = {english},
  file = {/Users/duongtat/Zotero/storage/KULER6FD/template-literal-types.html}
}

@online{DocumentationTypeScriptFunctional,
  title = {Documentation - {{TypeScript}} for {{Functional Programmers}}},
  url = {https://www.typescriptlang.org/docs/handbook/typescript-in-5-minutes-func.html},
  urldate = {2023-04-25},
  abstract = {Learn TypeScript if you have a background in functional programming},
  langid = {english},
  file = {/Users/duongtat/Zotero/storage/BZSFRWQ8/typescript-in-5-minutes-func.html}
}

@online{DocumentationTypeScriptJavaScript,
  title = {Documentation - {{TypeScript}} for {{JavaScript Programmers}}},
  url = {https://www.typescriptlang.org/docs/handbook/typescript-in-5-minutes.html},
  urldate = {2023-01-14},
  abstract = {Learn how TypeScript extends JavaScript},
  langid = {english},
  file = {/Users/duongtat/Zotero/storage/CRHXCVYD/typescript-in-5-minutes.html}
}

@software{ECMAScriptProposalType2023,
  title = {{{ECMAScript}} Proposal: {{Type Annotations}}},
  shorttitle = {{{ECMAScript}} Proposal},
  date = {2023-01-29T09:57:00Z},
  origdate = {2020-12-18T13:49:01Z},
  url = {https://github.com/tc39/proposal-type-annotations},
  urldate = {2023-01-29},
  abstract = {ECMAScript proposal for type syntax that is erased - Stage 1},
  organization = {{Ecma TC39}}
}

@online{EfficientInsightfulGeneralization,
  title = {Efficient and {{Insightful Generalization}}},
  url = {https://okmij.org/ftp/ML/generalization.html},
  urldate = {2023-02-12},
  file = {/Users/duongtat/Zotero/storage/QAQQHLMD/generalization.html}
}

@online{ElmArchitectureIntroduction,
  title = {The {{Elm Architecture}} ¬∑ {{An Introduction}} to {{Elm}}},
  url = {https://guide.elm-lang.org/architecture/},
  urldate = {2023-01-31},
  file = {/Users/duongtat/Zotero/storage/DDEA6QEU/architecture.html}
}

@online{ElmDelightfulLanguage,
  title = {Elm - Delightful Language for Reliable Web Applications},
  url = {https://elm-lang.org/},
  urldate = {2023-01-31},
  file = {/Users/duongtat/Zotero/storage/R6APMQNB/elm-lang.org.html}
}

@online{EsbuildExtremelyFast,
  title = {Esbuild - {{An}} Extremely Fast Bundler for the Web},
  url = {https://esbuild.github.io/},
  urldate = {2023-02-01},
  langid = {english},
  file = {/Users/duongtat/Zotero/storage/IFJEIABQ/esbuild.github.io.html}
}

@software{ESLint2023,
  title = {{{ESLint}}},
  date = {2023-04-28T16:48:11Z},
  origdate = {2013-06-29T23:59:48Z},
  url = {https://github.com/eslint/eslint},
  urldate = {2023-04-28},
  abstract = {Find and fix problems in your JavaScript code.},
  organization = {{ESLint}},
  keywords = {ecmascript,eslint,javascript,linter,static-code-analysis}
}

@online{ExtremeExplorationsTypeScript2022,
  title = {Extreme {{Explorations}} of {{TypeScript}}'s {{Type System}} | {{Learning TypeScript}}},
  date = {2022-06-27T00:00:00},
  url = {https://www.learningtypescript.com/articles/extreme-explorations-of-typescripts-type-system},
  urldate = {2023-04-29},
  abstract = {Some of the most creative, wacky explorations of what you can do in TypeScript's type system!},
  langid = {english},
  file = {/Users/duongtat/Zotero/storage/TQCJG3AP/extreme-explorations-of-typescripts-type-system.html}
}

@inproceedings{fardJSNOSEDetectingJavaScript2013,
  title = {{{JSNOSE}}: {{Detecting JavaScript Code Smells}}},
  shorttitle = {{{JSNOSE}}},
  booktitle = {2013 {{IEEE}} 13th {{International Working Conference}} on {{Source Code Analysis}} and {{Manipulation}} ({{SCAM}})},
  author = {Fard, Amin Milani and Mesbah, Ali},
  date = {2013-09},
  pages = {116--125},
  doi = {10.1109/SCAM.2013.6648192},
  abstract = {JavaScript is a powerful and flexible prototype-based scripting language that is increasingly used by developers to create interactive web applications. The language is interpreted, dynamic, weakly-typed, and has first-class functions. In addition, it interacts with other web languages such as CSS and HTML at runtime. All these characteristics make JavaScript code particularly error-prone and challenging to write and maintain. Code smells are patterns in the source code that can adversely influence program comprehension and maintainability of the program in the long term. We propose a set of 13 JavaScript code smells, collected from various developer resources. We present a JavaScript code smell detection technique called JSNOSE. Our metric-based approach combines static and dynamic analysis to detect smells in client-side code. This automated technique can help developers to spot code that could benefit from refactoring. We evaluate the smell finding capabilities of our technique through an empirical study. By analyzing 11 web applications, we investigate which smells detected by JSNOSE are more prevalent.},
  eventtitle = {2013 {{IEEE}} 13th {{International Working Conference}} on {{Source Code Analysis}} and {{Manipulation}} ({{SCAM}})},
  keywords = {Cascading style sheets,code smell,Conferences,HTML,JavaScript,Measurement,Prototypes,Reactive power,Runtime,smell detection,web applications},
  file = {/Users/duongtat/Zotero/storage/PY2MSYU3/Fard and Mesbah - 2013 - JSNOSE Detecting JavaScript Code Smells.pdf;/Users/duongtat/Zotero/storage/NACK3BUK/6648192.html}
}

@article{fardJSNOSEDetectingJavaScript2013a,
  title = {{{JSNOSE}}: {{Detecting JavaScript Code Smells}}},
  shorttitle = {{{JSNOSE}}},
  author = {Fard, Amin Milani and Mesbah, Ali},
  date = {2013-09},
  journaltitle = {2013 IEEE 13th International Working Conference on Source Code Analysis and Manipulation (SCAM)},
  pages = {116--125},
  publisher = {{IEEE}},
  location = {{Eindhoven, Netherlands}},
  doi = {10.1109/SCAM.2013.6648192},
  url = {http://ieeexplore.ieee.org/document/6648192/},
  urldate = {2023-03-25},
  abstract = {JavaScript is a powerful and flexible prototype-based scripting language that is increasingly used by developers to create interactive web applications. The language is interpreted, dynamic, weakly-typed, and has first-class functions. In addition, it interacts with other web languages such as CSS and HTML at runtime. All these characteristics make JavaScript code particularly error-prone and challenging to write and maintain. Code smells are patterns in the source code that can adversely influence program comprehension and maintainability of the program in the long term. We propose a set of 13 JavaScript code smells, collected from various developer resources. We present a JavaScript code smell detection technique called JSNOSE. Our metric-based approach combines static and dynamic analysis to detect smells in client-side code. This automated technique can help developers to spot code that could benefit from refactoring. We evaluate the smell finding capabilities of our technique through an empirical study. By analyzing 11 web applications, we investigate which smells detected by JSNOSE are more prevalent.},
  eventtitle = {2013 {{IEEE}} 13th {{International Working Conference}} on {{Source Code Analysis}} and {{Manipulation}} ({{SCAM}})},
  isbn = {9781467357395}
}

@inproceedings{feldthausCheckingCorrectnessTypeScript2014,
  title = {Checking Correctness of {{TypeScript}} Interfaces for {{JavaScript}} Libraries},
  booktitle = {Proceedings of the 2014 {{ACM International Conference}} on {{Object Oriented Programming Systems Languages}} \& {{Applications}}},
  author = {Feldthaus, Asger and M√∏ller, Anders},
  date = {2014-10-15},
  series = {{{OOPSLA}} '14},
  pages = {1--16},
  publisher = {{Association for Computing Machinery}},
  location = {{New York, NY, USA}},
  doi = {10.1145/2660193.2660215},
  url = {https://doi.org/10.1145/2660193.2660215},
  urldate = {2023-01-29},
  abstract = {The TypeScript programming language adds optional types to JavaScript, with support for interaction with existing JavaScript libraries via interface declarations. Such declarations have been written for hundreds of libraries, but they can be difficult to write and often contain errors, which may affect the type checking and misguide code completion for the application code in IDEs. We present a pragmatic approach to check correctness of TypeScript declaration files with respect to JavaScript library implementations. The key idea in our algorithm is that many declaration errors can be detected by an analysis of the library initialization state combined with a light-weight static analysis of the library function code. Our experimental results demonstrate the effectiveness of the approach: it has found 142 errors in the declaration files of 10 libraries, with an analysis time of a few minutes per library and with a low number of false positives. Our analysis of how programmers use library interface declarations furthermore reveals some practical limitations of the TypeScript type system.},
  isbn = {978-1-4503-2585-1},
  keywords = {program analysis,type checking},
  file = {/Users/duongtat/Zotero/storage/CBK4U6DN/Feldthaus and M√∏ller - 2014 - Checking correctness of TypeScript interfaces for .pdf}
}

@article{fischerEmpiricalInvestigationEffects2015,
  title = {An Empirical Investigation of the Effects of Type Systems and Code Completion on {{API}} Usability Using {{TypeScript}} and {{JavaScript}} in {{MS}} Visual Studio},
  author = {Fischer, Lars and Hanenberg, Stefan},
  date = {2015-10-21},
  journaltitle = {ACM SIGPLAN Notices},
  shortjournal = {SIGPLAN Not.},
  volume = {51},
  number = {2},
  pages = {154--167},
  issn = {0362-1340},
  doi = {10.1145/2936313.2816720},
  url = {https://dl.acm.org/doi/10.1145/2936313.2816720},
  urldate = {2023-03-24},
  abstract = {Recent empirical studies that compared static and dynamic type systems on API usability showed a positive impact of static type systems on developer productivity in most cases. Nevertheless, it is unclear how large this effect is in comparison to other factors. One obvious factor in programming is tooling: It is commonly accepted that modern IDEs have a large positive impact on developers, although it is not clear which parts of modern IDEs are responsible for that. One possible---and for most developers obvious candidate---is code completion. This paper describes a 2x2 randomized trial that compares JavaScript and Microsoft's statically typed alternative TypeScript with and without code completion in MS Visual Studio. While the experiment shows (in correspondence to previous experiments) a large positive effect of the statically typed language TypeScript, the code completion effect is not only marginal, but also just approaching statistical significance. This seems to be an indicator that the effect of static type systems is larger than often assumed, at least in comparison to code completion.},
  keywords = {code completion,empirical research,programming languages,type systems},
  file = {/Users/duongtat/Zotero/storage/2WHD5CTV/Fischer and Hanenberg - 2015 - An empirical investigation of the effects of type .pdf}
}

@software{Flow2023,
  title = {Flow},
  date = {2023-01-29T12:33:40Z},
  origdate = {2014-10-28T17:17:45Z},
  url = {https://github.com/facebook/flow},
  urldate = {2023-01-29},
  abstract = {Adds static typing to JavaScript to improve developer productivity and code quality.},
  organization = {{Meta}}
}

@online{GcantiFptsFunctional,
  title = {Gcanti/Fp-Ts: {{Functional}} Programming in {{TypeScript}}},
  url = {https://github.com/gcanti/fp-ts},
  urldate = {2023-04-25},
  file = {/Users/duongtat/Zotero/storage/QC8YAIVF/fp-ts.html}
}

@software{geoffreytoolsFreetypes2023,
  title = {Free-Types},
  author = {{geoffreytools}},
  date = {2023-03-26T12:03:24Z},
  origdate = {2022-10-23T21:25:02Z},
  url = {https://github.com/geoffreytools/free-types},
  urldate = {2023-04-25},
  abstract = {A type-level library enabling the creation and the manipulation of type constructors which can be detached from their type parameters. Also referred to as higher kinded types.},
  keywords = {higher-kinded-types,hkt,type-level-programming,typescript}
}

@online{GrammarMathematicalExpressions2015,
  title = {The Grammar of Mathematical Expressions},
  date = {2015-01-28T22:31:00-05:00},
  url = {https://www.robertjacobson.dev/the-grammar-of-mathematical-expressions},
  urldate = {2023-04-04},
  abstract = {Using computers to do automatic translation has a long and rich history in computer science. A course in compiler construction is a veritable survey of topics in computer science running the gamut from formal languages to data structures and algorithms to Hopfcroft‚Äôs algorithm to minimize deterministic automata. One of the},
  organization = {{After Math}},
  file = {/Users/duongtat/Zotero/storage/X2P8ZJL6/the-grammar-of-mathematical-expressions.html}
}

@article{hejlsbergTypeScriptLanguageSpecification,
  title = {{{TypeScript Language Specification}}},
  author = {Hejlsberg, Anders and Lucco, Steve},
  langid = {english},
  file = {/Users/duongtat/Zotero/storage/GQ2ZQQ4E/Hejlsberg and Lucco - TypeScript Language Specification.pdf}
}

@online{hexoEffectiveTypeScriptSeven2021,
  title = {Effective {{TypeScript}} ‚Ä∫ {{The Seven Sources}} of {{Unsoundness}} in {{TypeScript}}},
  author = {{Hexo}},
  date = {2021-05-07},
  url = {https://effectivetypescript.com/},
  urldate = {2023-01-29},
  abstract = {Hang out on the internet much and you\&\#39;ll hear gripes about how TypeScript isn\&\#39;t \&quot;sound,\&quot; and that this makes it a poor choice of language. In this post, I\&\#39;ll explain what this means and walk through the sources of unsoundness in TypeScript. Rest assured, TypeScript is a great language and it\&\#39;s never a good idea to listen to people on the internet!},
  file = {/Users/duongtat/Zotero/storage/FCQAU4A6/unsoundness.html}
}

@online{HigherKindedTypes2022,
  title = {Higher {{Kinded Types}} in {{Typescript}}},
  date = {2022-03-03T22:18:42-08:00},
  url = {https://code.lol/post/programming/higher-kinded-types/},
  urldate = {2023-04-25},
  abstract = {HKTs are a powerful abstraction. Just as there are different types of higher-order functions, so are there so-called ‚Äòhigher-kinded types‚Äô. Taxonomy This blog post concerns one particular type of HKT - to define the taxonomy, first we will cover a few types, and a way they can be categorized. We can classify types in terms of ‚Äòorder‚Äô, a rough level of abstraction. Here are a few zero-order types that exist:},
  langid = {english},
  file = {/Users/duongtat/Zotero/storage/C96SICTC/higher-kinded-types.html}
}

@online{HistoryReScript2022,
  title = {History | {{ReScript}}},
  date = {2022-02-12},
  url = {https://github.com/rescript-lang/rescript-compiler/blob/master/CREDITS.md},
  urldate = {2023-02-12},
  langid = {english}
}

@software{horvath-huntTshm2023,
  title = {Tshm},
  author = {Horvath-Hunt, Sam A.},
  date = {2023-01-29T20:00:24Z},
  origdate = {2020-12-10T23:40:20Z},
  url = {https://github.com/samhh/tshm},
  urldate = {2023-01-29},
  abstract = {A parser and formatter for TypeScript declarations that outputs HM-style type signatures.}
}

@software{ImplementationCheckerTs2023,
  title = {Implementation of Checker.Ts},
  date = {2023-03-30T23:51:54Z},
  origdate = {2014-06-17T15:28:39Z},
  url = {https://github.com/microsoft/TypeScript/blob/55867271933d603f6c29b8eb7399960a71e96ccc/src/compiler/checker.ts},
  urldate = {2023-03-31},
  abstract = {Implementation of Checker found in TypeScript source code},
  organization = {{Microsoft}}
}

@video{jsworldconferenceFredSchottTypesafety2023,
  title = {Fred {{K}}. {{Schott}} - {{Type-safety}} Is Eating the World},
  editor = {{JSWORLD Conference}},
  date = {2023},
  url = {https://www.youtube.com/watch?v=DqYxbjTM2vw},
  urldate = {2023-03-25},
  abstract = {Co-Creator of Astro will bring us Type-safety is eating the world. Let's go deep on Type-safe Markdown and / or HoustonAI at JSworld Conference 2023. https://www.jsworldconference.com/live Powered by https://passionatepeople.io \#jsworld \#jsworldconference \#frontendlove \#frontenddeveloperlove \#javascript \#reactjs \#angular \#react \#vuejs \#vue \#vue3 \#typescript \#graphql \#jamstack \#amsterdam \#conference \#svelte \#sveltejs \#next \#nextjs \#staticsite \#css \#html \#nuxt},
  editortype = {director}
}

@software{kawayilinlinKawayiLinLinTypescriptlodash2023,
  title = {{{kawayiLinLin}}/Typescript-Lodash},
  author = {{kawayiLinLin}},
  date = {2023-01-09T06:26:22Z},
  origdate = {2022-01-30T06:58:40Z},
  url = {https://github.com/kawayiLinLin/typescript-lodash},
  urldate = {2023-01-15},
  abstract = {A typescript tools lib},
  keywords = {js,jslibrary,lodash,ts,tslib,types,typescript,utils}
}

@online{KindsHigherKindedTypes,
  title = {Kinds and {{Higher-Kinded Types}} in {{Haskell}}},
  url = {https://serokell.io/blog/kinds-and-hkts-in-haskell},
  urldate = {2023-04-25},
  abstract = {What's the type of a type? Can a type abstract over polymorphic types? Find the answers to these questions in our article on kinds in Haskell.},
  organization = {{Serokell Software Development Company}},
  file = {/Users/duongtat/Zotero/storage/AZ7NLM6G/kinds-and-hkts-in-haskell.html}
}

@online{klepovMakingSenseTypeScript2023,
  title = {Making Sense of {{TypeScript}} Using Set Theory},
  author = {Klepov, Vladimir},
  date = {2023-01-23T00:00:00},
  url = {https://blog.thoughtspile.tech/2023/01/23/typescript-sets/},
  urldate = {2023-01-24},
  langid = {english},
  organization = {{Vladimir Klepov as a Coder}},
  file = {/Users/duongtat/Zotero/storage/EZE3EN2N/typescript-sets.html}
}

@software{kukkonenEncodingHigherkindedTypes2021,
  title = {Encoding Higher-Kinded Types in {{TypeScript}}},
  author = {Kukkonen, Sami},
  date = {2021-12-19T14:57:01Z},
  origdate = {2019-04-21T17:41:27Z},
  url = {https://github.com/strax/tshkt},
  urldate = {2023-04-25},
  abstract = {Encoding higher-kinded types in TypeScript}
}

@article{mcbrideApplicativeProgrammingEffects2008,
  title = {Applicative Programming with Effects},
  author = {Mcbride, Conor and Paterson, Ross},
  date = {2008-01},
  journaltitle = {Journal of Functional Programming},
  volume = {18},
  number = {1},
  pages = {1--13},
  publisher = {{Cambridge University Press}},
  issn = {1469-7653, 0956-7968},
  doi = {10.1017/S0956796807006326},
  url = {https://www.cambridge.org/core/journals/journal-of-functional-programming/article/applicative-programming-with-effects/C80616ACD5687ABDC86D2B341E83D298},
  urldate = {2023-04-25},
  abstract = {In this article, we introduce Applicative functors ‚Äì an abstract characterisation of an applicative style of effectful programming, weaker than Monads and hence more widespread. Indeed, it is the ubiquity of this programming pattern that drew us to the abstraction. We retrace our steps in this article, introducing the applicative pattern by diverse examples, then abstracting it to define the Applicative type class and introducing a bracket notation that interprets the normal application syntax in the idiom of an Applicative functor. Furthermore, we develop the properties of applicative functors and the generic operations they support. We close by identifying the categorical structure of applicative functors and examining their relationship both with Monads and with Arrow.},
  langid = {english},
  file = {/Users/duongtat/Zotero/storage/R93CULFZ/Mcbride and Paterson - 2008 - Applicative programming with effects.pdf}
}

@software{mcdonnellZod2023,
  title = {Zod},
  author = {McDonnell, Colin},
  date = {2023-03-25T01:27:22Z},
  origdate = {2020-03-07T20:59:08Z},
  url = {https://github.com/colinhacks/zod},
  urldate = {2023-03-25},
  abstract = {TypeScript-first schema validation with static type inference},
  keywords = {runtime-validation,schema-validation,static-types,type-inference,typescript}
}

@online{MistlogTypetypeProgramming,
  title = {Mistlog/Typetype: {{A}} Programming Language Designed for Typescript Type Generation},
  url = {https://github.com/mistlog/typetype},
  urldate = {2023-01-25},
  file = {/Users/duongtat/Zotero/storage/XAC77PJQ/typetype.html}
}

@online{Octoverse2022State,
  title = {Octoverse 2022: {{The}} State of Open Source},
  shorttitle = {Octoverse 2022},
  url = {https://octoverse.github.com/},
  urldate = {2023-01-29},
  abstract = {How open source is changing software development including at companies.},
  langid = {british},
  organization = {{The State of the Octoverse}},
  file = {/Users/duongtat/Zotero/storage/LY7VJIUK/octoverse.github.com.html}
}

@online{ParsingExpressionsRecursive,
  title = {Parsing {{Expressions}} by {{Recursive Descent}}},
  url = {https://www.engr.mun.ca/~theo/Misc/exp_parsing.htm},
  urldate = {2023-04-04},
  file = {/Users/duongtat/Zotero/storage/8TFS2BZR/exp_parsing.html}
}

@online{PaulChiusanoAdvantages,
  title = {Paul {{Chiusano}}: {{The}} Advantages of Static Typing, Simply Stated},
  url = {https://pchiusano.github.io/2016-09-15/static-vs-dynamic.html},
  urldate = {2023-03-23},
  file = {/Users/duongtat/Zotero/storage/6DKBE756/static-vs-dynamic.html}
}

@online{Performance,
  title = {Performance},
  url = {https://github.com/microsoft/TypeScript/wiki/Performance},
  urldate = {2023-04-02},
  abstract = {TypeScript is a superset of JavaScript that compiles to clean JavaScript output. - microsoft/TypeScript},
  langid = {english},
  organization = {{GitHub}},
  file = {/Users/duongtat/Zotero/storage/2UBCCG8B/Performance.html}
}

@online{PrattParsersExpression,
  title = {Pratt {{Parsers}}: {{Expression Parsing Made Easy}} ‚Äì Journal.Stuffwithstuff.Com},
  url = {http://journal.stuffwithstuff.com/2011/03/19/pratt-parsers-expression-parsing-made-easy/},
  urldate = {2023-04-04},
  file = {/Users/duongtat/Zotero/storage/9MQEKB28/pratt-parsers-expression-parsing-made-easy.html}
}

@online{PriorArtRedux2022,
  title = {Prior {{Art}} | {{Redux}}},
  date = {2022-02-07},
  url = {https://redux.js.org/understanding/history-and-design/prior-art},
  urldate = {2023-01-31},
  abstract = {Introduction {$>$} Prior Art: Influences on the design of Redux},
  langid = {english},
  file = {/Users/duongtat/Zotero/storage/EBBRIGDL/prior-art.html}
}

@online{PrismaPrismaNextgeneration,
  title = {Prisma/Prisma: {{Next-generation ORM}} for {{Node}}.Js \& {{TypeScript}} | {{PostgreSQL}}, {{MySQL}}, {{MariaDB}}, {{SQL Server}}, {{SQLite}}, {{MongoDB}} and {{CockroachDB}}},
  url = {https://github.com/prisma/prisma},
  urldate = {2023-03-25},
  file = {/Users/duongtat/Zotero/storage/A4NVJUW6/prisma.html}
}

@online{ProposalPartialType,
  title = {Proposal: {{Partial Type Argument Inference}} ¬∑ {{Issue}} \#26242 ¬∑ Microsoft/{{TypeScript}}},
  shorttitle = {Proposal},
  url = {https://github.com/microsoft/TypeScript/issues/26242},
  urldate = {2023-03-25},
  abstract = {After exploring the concept in \#23696, we've come to the conclusion that implicitly making type arguments available by name would unnecessarily expose previously unobservable implementation details...},
  langid = {english},
  organization = {{GitHub}},
  file = {/Users/duongtat/Zotero/storage/7MJBPIFD/26242.html}
}

@online{ReconstructingTypeScriptPart,
  title = {Reconstructing {{TypeScript}}, Part 0: Intro and Background},
  url = {https://jaked.org/blog/2021-09-07-Reconstructing-TypeScript-part-0},
  urldate = {2023-01-24},
  file = {/Users/duongtat/Zotero/storage/6KT5F8D4/2021-09-07-Reconstructing-TypeScript-part-0.html}
}

@online{RecursiveDescentPratt2022,
  title = {On {{Recursive Descent}} and {{Pratt Parsing}}},
  date = {2022-05-31T00:15:47+01:00},
  url = {https://chidiwilliams.com/post/on-recursive-descent-and-pratt-parsing/},
  urldate = {2023-04-04},
  abstract = {In this essay, we‚Äôll discuss two techniques for parsing expressions: recursive descent parsing and Pratt parsing. We‚Äôll implement both parsers for a small expression language, Covey, that supports addition, multiplication, subtraction, division, unary negation, and ternary expressions on numbers and identifiers. We‚Äôll only cover the implementations of the parsers here to compare the recursive descent and Pratt parsing schemes. For the implementation of a complete expression evaluator, see Building an Expression Evaluator and How to Write a Lisp Interpreter in JavaScript.},
  langid = {english},
  file = {/Users/duongtat/Zotero/storage/SYFPYZUI/on-recursive-descent-and-pratt-parsing.html}
}

@software{ReScript2023,
  title = {{{ReScript}}},
  date = {2023-02-11T08:21:21Z},
  origdate = {2016-01-06T20:34:59Z},
  url = {https://github.com/rescript-lang/rescript-compiler},
  urldate = {2023-02-12},
  abstract = {The compiler for ReScript.},
  organization = {{ReScript}}
}

@inproceedings{reynoldsDefinitionalInterpretersHigherorder1972,
  title = {Definitional Interpreters for Higher-Order Programming Languages},
  booktitle = {Proceedings of the {{ACM}} Annual Conference - {{Volume}} 2},
  author = {Reynolds, John C.},
  date = {1972-08-01},
  series = {{{ACM}} '72},
  pages = {717--740},
  publisher = {{Association for Computing Machinery}},
  location = {{New York, NY, USA}},
  doi = {10.1145/800194.805852},
  url = {https://dl.acm.org/doi/10.1145/800194.805852},
  urldate = {2023-04-25},
  abstract = {Higher-order programming languages (i.e., languages in which procedures or labels can occur as values) are usually defined by interpreters which are themselves written in a programming language based on the lambda calculus (i.e., an applicative language such as pure LISP). Examples include McCarthy's definition of LISP, Landin's SECD machine, the Vienna definition of PL/I, Reynolds' definitions of GEDANKEN, and recent unpublished work by L. Morris and C. Wadsworth. Such definitions can be classified according to whether the interpreter contains higher-order functions, and whether the order of application (i.e., call-by-value versus call-by-name) in the defined language depends upon the order of application in the defining language. As an example, we consider the definition of a simple applicative programming language by means of an interpreter written in a similar language. Definitions in each of the above classifications are derived from one another by informal but constructive methods. The treatment of imperative features such as jumps and assignment is also discussed.},
  isbn = {978-1-4503-7492-7},
  keywords = {Applicative language,Closure,Continuation,GEDANKEN,Higher-order function,Interpreter,J-operator,Lambda calculus,Language definition,LISP,Order of application,PAL,Programming language,Reference,SECD machine},
  file = {/Users/duongtat/Zotero/storage/RU4ZZLDZ/Reynolds - 1972 - Definitional interpreters for higher-order program.pdf}
}

@online{sasakiHowConstructLL2019,
  title = {How to Construct {{LL}}(1) Grammar of Arithmetic Operations},
  author = {Sasaki, Kai},
  date = {2019-05-02T23:26:59+00:00},
  url = {http://www.lewuathe.com/how-to-construct-grammar-of-arithmetic-operations.html},
  urldate = {2023-04-04},
  abstract = {While I read a compiler book, I have struggled to understand the reason why the arithmetic operations are expressed as follows.},
  langid = {american},
  organization = {{The First Cry of Atom}},
  file = {/Users/duongtat/Zotero/storage/5YQ9HDUS/how-to-construct-grammar-of-arithmetic-operations.html}
}

@software{sherretTsmorph2023,
  title = {Ts-Morph},
  author = {Sherret, David},
  date = {2023-04-29T19:33:17Z},
  origdate = {2017-03-04T03:03:03Z},
  url = {https://github.com/dsherret/ts-morph},
  urldate = {2023-05-01},
  abstract = {TypeScript Compiler API wrapper for static analysis and programmatic code changes.},
  keywords = {ast,code-generation,javascript,static-analysis,typescript}
}

@online{ShuntingYardAlgorithm,
  title = {Shunting Yard Algorithm - {{PEGWiki}}},
  url = {https://wcipeg.com/wiki/Shunting_yard_algorithm},
  urldate = {2023-04-04}
}

@online{SimplePowerfulPratt,
  title = {Simple but {{Powerful Pratt Parsing}}},
  url = {https://matklad.github.io/2020/04/13/simple-but-powerful-pratt-parsing.html},
  urldate = {2023-04-04},
  file = {/Users/duongtat/Zotero/storage/BE2BP3YJ/simple-but-powerful-pratt-parsing.html}
}

@software{sorhusSindresorhusTypefest2023,
  title = {Sindresorhus/Type-Fest},
  author = {Sorhus, Sindre},
  date = {2023-04-02T16:14:43Z},
  origdate = {2019-03-13T10:30:19Z},
  url = {https://github.com/sindresorhus/type-fest},
  urldate = {2023-04-02},
  abstract = {A collection of essential TypeScript types},
  keywords = {npm-package,types,typescript,typescript-definitions,utilities}
}

@online{StackOverflowDeveloper,
  title = {Stack {{Overflow Developer Survey}} 2022},
  url = {https://survey.stackoverflow.co/2022/?utm_source=social-share&utm_medium=social&utm_campaign=dev-survey-2022},
  urldate = {2023-01-29},
  abstract = {In May 2022 over 70,000 developers told us how they learn and level up, which tools they‚Äôre using, and what they want.},
  langid = {english},
  organization = {{Stack Overflow}},
  file = {/Users/duongtat/Zotero/storage/NXIJAW6Y/2022.html}
}

@online{StandaloneServerTsserver,
  title = {Standalone {{Server}} (Tsserver)},
  url = {https://github.com/microsoft/TypeScript/wiki/Standalone-Server-(tsserver)},
  urldate = {2023-03-27},
  abstract = {TypeScript is a superset of JavaScript that compiles to clean JavaScript output. - microsoft/TypeScript},
  langid = {english},
  organization = {{GitHub}},
  file = {/Users/duongtat/Zotero/storage/SQESLVE9/Standalone-Server-(tsserver).html}
}

@online{StateJS2022,
  title = {The {{State}} of {{JS}} 2022: {{Usage}}},
  shorttitle = {The {{State}} of {{JS}} 2022},
  url = {https://2022.stateofjs.com/en-US/usage/},
  urldate = {2023-03-25},
  abstract = {The 2022 edition of the annual survey about the latest trends in the JavaScript ecosystem.},
  langid = {english},
  file = {/Users/duongtat/Zotero/storage/HFP8IH8U/usage.html}
}

@software{Stc2023,
  title = {Stc},
  date = {2023-04-29T14:42:02Z},
  origdate = {2020-12-29T12:41:02Z},
  url = {https://github.com/dudykr/stc},
  urldate = {2023-04-29},
  abstract = {Speedy TypeScript type checker},
  organization = {{Dudy}},
  keywords = {rust,typescript}
}

@article{sutterConsistentComparison2017,
  title = {Consistent Comparison},
  author = {Sutter, Herb},
  date = {2017-11-10},
  file = {/Users/duongtat/Zotero/storage/82D7DWIT/p0515r3.pdf}
}

@online{SWCRustbasedPlatform,
  title = {{{SWC}} - {{Rust-based}} Platform for the {{Web}}},
  url = {https://swc.rs/},
  urldate = {2023-02-01},
  abstract = {SWC is an extensible Rust-based platform for the next generation of fast developer tools. It's used by tools like Next.js, Parcel, and Deno, as well as companies like Vercel, ByteDance, Tencent, Shopify, and more.},
  langid = {english},
  file = {/Users/duongtat/Zotero/storage/KPZBDT6B/swc.rs.html}
}

@article{tandonAlgorithmComputeCubes2014,
  title = {Algorithm to {{Compute Cubes}} of 1st \&{{quotN}}\&quot {{Natural Numbers}} Using {{Single Multiplication}} per {{Iteration}}},
  author = {Tandon, Rajat and Tandon, Rajika},
  date = {2014-09-18},
  journaltitle = {International Journal of Computer Applications},
  shortjournal = {IJCA},
  volume = {101},
  number = {15},
  pages = {6--9},
  issn = {09758887},
  doi = {10.5120/17761-8872},
  url = {http://research.ijcaonline.org/volume101/number15/pxc3898872.pdf},
  urldate = {2023-04-15},
  abstract = {Different processors work with disparate speeds. For any given processor, elementary operations differ in terms of their speeds and computational complexities. The paper presents an algorithm to compute cubes of 1st ‚ÄúN‚Äù Natural Numbers using one multiplication by constant, two additions on variables and one addition by constant, per iteration. Theoretically, computational complexity of multiplication is O(n2) while that of addition is Œò(n), where n is the number of bits used to represent that number. So, keeping the number of iterations same in both, in the traditional approach, the overall computational complexity per iteration is expressed in the order of O(n2) while in the current approach the overall computational complexity per iteration is of the order of O(n). For small values of ‚ÄúN‚Äù, the difference in complexities may not be huge. But, given any large value of ‚ÄúN‚Äù, difference will be noticeable.},
  langid = {english},
  file = {/Users/duongtat/Zotero/storage/P6PBEFY4/Tandon and Tandon - 2014 - Algorithm to Compute Cubes of 1st &quotN&quot Natu.pdf}
}

@software{theroxVscodetwoslashqueries2023,
  title = {Vscode-Twoslash-Queries},
  author = {Therox, Orta},
  date = {2023-03-24T06:47:40Z},
  origdate = {2022-06-07T12:47:07Z},
  url = {https://github.com/orta/vscode-twoslash-queries},
  urldate = {2023-03-26},
  abstract = {VS Code extension which adds support for twoslash queries into typescript projects},
  keywords = {typescript,vscode,vscode-extension}
}

@online{TopTypesAny,
  title = {The Top Types `any` and `unknown` in {{TypeScript}}},
  url = {https://2ality.com/2020/06/any-unknown-typescript.html},
  urldate = {2023-03-26},
  abstract = {In TypeScript, any and unknown are types that contain all values. In this blog post, we examine how they work.},
  langid = {american},
  file = {/Users/duongtat/Zotero/storage/D7PLA7TK/any-unknown-typescript.html}
}

@software{TRPC2023,
  title = {{{tRPC}}},
  date = {2023-03-25T02:31:19Z},
  origdate = {2020-07-18T01:17:11Z},
  url = {https://github.com/trpc/trpc},
  urldate = {2023-03-25},
  abstract = {üßô‚Äç‚ôÄÔ∏è  Move Fast and Break Nothing. End-to-end typesafe APIs made easy.},
  organization = {{tRPC}},
  keywords = {api,next,nextjs,prisma,react,typescript}
}

@online{Tsmathevaluate2023,
  title = {Ts-Math-Evaluate},
  date = {2023-04-12},
  url = {https://www.npmjs.com/package/ts-math-evaluate},
  urldate = {2023-04-29},
  abstract = {![TS-Math-Evaluate](https://raw.githubusercontent.com/dqbd/ts-math-evaluate/main/assets/cover.svg). Latest version: 0.0.4, last published: 16 days ago. Start using ts-math-evaluate in your project by running `npm i ts-math-evaluate`. There are no other projects in the npm registry using ts-math-evaluate.},
  langid = {english},
  organization = {{npm}},
  file = {/Users/duongtat/Zotero/storage/RKJW8X8X/ts-math-evaluate.html}
}

@software{TypechallengesTypechallenges2023,
  title = {Type-Challenges/Type-Challenges},
  date = {2023-04-02T20:07:18Z},
  origdate = {2020-07-23T14:33:11Z},
  url = {https://github.com/type-challenges/type-challenges},
  urldate = {2023-04-02},
  abstract = {Collection of TypeScript type challenges with online judge},
  organization = {{Type Challenges}},
  keywords = {challenges,type,type-system,typescript}
}

@online{TypeInferenceHigherorder,
  title = {Type Inference for Higher-Order, Generic Curried Function Breaks down When the Function Is Applied to Another Generic Function ¬∑ {{Issue}} \#49312 ¬∑ Microsoft/{{TypeScript}}},
  url = {https://github.com/microsoft/TypeScript/issues/49312},
  urldate = {2023-03-28},
  abstract = {Bug Report üîé Search Terms type, inference, higher-order, generic, curried, function üïó Version \& Regression Information This is the behavior in every version I tried, and I reviewed the FAQ for entr...},
  langid = {english},
  organization = {{GitHub}},
  file = {/Users/duongtat/Zotero/storage/JQ6BX8SL/1213.html}
}

@online{TypeScriptCompilerInternals,
  title = {{{TypeScript Compiler Internals}}},
  url = {https://basarat.gitbook.io/typescript/overview},
  urldate = {2023-01-29},
  langid = {english},
  file = {/Users/duongtat/Zotero/storage/ACPRC8UN/overview.html}
}

@online{TypeScriptDeepDive,
  title = {{{TypeScript Deep Dive}}},
  url = {https://basarat.gitbook.io/typescript/},
  urldate = {2023-01-18},
  langid = {english},
  file = {/Users/duongtat/Zotero/storage/TML57CY6/typescript.html}
}

@online{TypeScriptDesignGoals,
  title = {{{TypeScript Design Goals}}},
  url = {https://github.com/microsoft/TypeScript/wiki/TypeScript-Design-Goals},
  urldate = {2023-01-29},
  abstract = {TypeScript is a superset of JavaScript that compiles to clean JavaScript output. - microsoft/TypeScript},
  langid = {english},
  organization = {{GitHub}},
  file = {/Users/duongtat/Zotero/storage/4FTYCKHX/TypeScript-Design-Goals.html}
}

@online{TypeScriptJavaScriptSyntax,
  title = {{{TypeScript}}: {{JavaScript With Syntax For Types}}},
  url = {https://www.typescriptlang.org/},
  urldate = {2023-02-01},
  abstract = {TypeScript extends JavaScript by adding types to the language. TypeScript speeds up your development experience by catching errors and providing fixes before you even run your code.},
  langid = {english},
  file = {/Users/duongtat/Zotero/storage/3RB7QH4F/www.typescriptlang.org.html}
}

@online{UnderstandingGitHubActions,
  title = {Understanding {{GitHub Actions}}},
  url = {https://ghdocs-prod.azurewebsites.net/en/actions/learn-github-actions/understanding-github-actions},
  urldate = {2023-04-28},
  abstract = {Learn the basics of GitHub Actions, including core concepts and essential terminology.},
  langid = {english},
  organization = {{GitHub Docs}},
  file = {/Users/duongtat/Zotero/storage/STBHUGD3/understanding-github-actions.html}
}

@book{vanderkamEffectiveTypeScript622019,
  title = {Effective {{TypeScript}}: 62 Specific Ways to Improve Your {{TypeScript}}},
  shorttitle = {Effective {{TypeScript}}},
  author = {Vanderkam, Dan},
  date = {2019},
  edition = {First edition},
  publisher = {{O'Reilly Media}},
  location = {{Beijing [China] ; Sebastopol, CA}},
  isbn = {978-1-4920-5374-3},
  pagetotal = {243},
  keywords = {Application software,Development,TypeScript (Computer program language),Web applications},
  file = {/Users/duongtat/Zotero/storage/L8WU7LDY/Vanderkam - 2019 - Effective TypeScript 62 specific ways to improve .pdf}
}

@software{vergnaudHigherOrderTypeScriptHOTScript2023,
  title = {Higher-{{Order TypeScript}} ({{HOTScript}})},
  author = {Vergnaud, Gabriel},
  date = {2023-04-25T21:08:39Z},
  origdate = {2023-02-12T19:25:57Z},
  url = {https://github.com/gvergnaud/hotscript},
  urldate = {2023-04-25},
  abstract = {A library of composable functions for the type-level! Transform your TypeScript types in any way you want using functions you already know.},
  keywords = {type-level-programming,typescript}
}

@online{VisualStudioCode,
  title = {Visual {{Studio Code}} - {{Code Editing}}. {{Redefined}}},
  url = {https://code.visualstudio.com/},
  urldate = {2023-02-01},
  abstract = {Visual Studio Code is a code editor redefined and optimized for building and debugging modern web and cloud applications.~ Visual Studio Code is free and available on your favorite platform - Linux, macOS, and Windows.},
  langid = {english},
  file = {/Users/duongtat/Zotero/storage/TSK7F952/code.visualstudio.com.html}
}

@inproceedings{wadlerMonadsFunctionalProgramming1993,
  title = {Monads for Functional Programming},
  booktitle = {Program {{Design Calculi}}},
  author = {Wadler, Philip},
  editor = {Broy, Manfred},
  date = {1993},
  series = {{{NATO ASI Series}}},
  pages = {233--264},
  publisher = {{Springer}},
  location = {{Berlin, Heidelberg}},
  doi = {10.1007/978-3-662-02880-3_8},
  abstract = {The use of monads to structure functional programs is described. Monads provide a convenient framework for simulating effects found in other languages, such as global state, exception handling, output, or non-determinism. Three case studies are looked at in detail: how monads ease the modification of a simple evaluator; how monads act as the basis of a datatype of arrays subject to in-place update; and how monads can be used to build parsers.},
  isbn = {978-3-662-02880-3},
  langid = {english},
  keywords = {category theory,functional programming,monads,parsers.,programming languages,pure vs. impure functional languages,semantics,state}
}

@online{WhatCICD,
  title = {What {{Is CI}}/{{CD}}, {{Continuous Integration}} and {{Continuous Delivery}}?},
  url = {https://www.cisco.com/c/en/us/solutions/data-center/data-center-networking/what-is-ci-cd.html},
  urldate = {2023-04-28},
  abstract = {Learn about CI/CD, or continuous integration and continuous delivery, which are the processes many development teams use to streamline their lifecycle.},
  langid = {english},
  organization = {{Cisco}},
  file = {/Users/duongtat/Zotero/storage/LI4J6VGN/what-is-ci-cd.html}
}

@inproceedings{yallopLightweightHigherKindedPolymorphism2014,
  title = {Lightweight {{Higher-Kinded Polymorphism}}},
  booktitle = {Functional and {{Logic Programming}}},
  author = {Yallop, Jeremy and White, Leo},
  editor = {Codish, Michael and Sumii, Eijiro},
  date = {2014},
  series = {Lecture {{Notes}} in {{Computer Science}}},
  pages = {119--135},
  publisher = {{Springer International Publishing}},
  location = {{Cham}},
  doi = {10.1007/978-3-319-07151-0_8},
  abstract = {Higher-kinded polymorphism ‚Äîi.e. abstraction over type constructors‚Äî is an essential component of many functional programming techniques such as monads, folds, and embedded DSLs. ML-family languages typically support a form of abstraction over type constructors using functors, but the separation between the core language and the module language leads to awkwardness as functors proliferate.},
  isbn = {978-3-319-07151-0},
  langid = {english},
  keywords = {Abstract Type,Constructor Class,Core Language,Type Constructor,Type Expression},
  file = {/Users/duongtat/Zotero/storage/HV6VZHHP/Yallop and White - 2014 - Lightweight Higher-Kinded Polymorphism.pdf}
}
